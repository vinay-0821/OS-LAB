//exception handler

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;
backup;

//mode change
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]* 16 + 9 ] = -1; 
multipush(EIP);

if(EC != 0 || [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] == PTLR*512 - 1)  then

    if(EC == 1)  then

        print "illegal instruction";

    endif; 

    if(EC == 2)  then
       
       print "illegal memory access";
    
    endif;

    if(EC == 3)  then
        
        print "arithematic exception";

    endif;

    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];



    call MOD_1;   //calling exit process

    call MOD_5;  //calling scheduler


else  if(EC == 0)  then
    

    // print "EPN";
    // print EPN;

    if(EPN == 2 || EPN == 3) then
        

        R1 = 1;
        call MOD_2;   //calling get free page

        [PTBR + 4] = R0;
        [PTBR + 5] = "1110";

        R1 = 1;
        call MOD_2;
        [PTBR + 6] = R0;
        [PTBR + 7] = "1110";



    else if (EPN == 4 || EPN == 5|| EPN == 6 || EPN == 7) then
        

        R1 = 5;

        R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];

        // print R2;


        call MOD_2;
        

        // print R0;

        [PTBR + EPN*2] = R0;
        [PTBR + EPN*2 + 1] = "1100";



    endif;

    endif;

endif;

endif;


multipop(EIP);
restore;

//mode change
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]* 16 + 9 ] = 0;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
SP = SP + 1;
[[PTBR + 2*(SP/512)]*512 + SP%512] = EIP;

ireturn;