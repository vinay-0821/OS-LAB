alias userSP R0;
alias process_entry R1;

userSP = SP;
process_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_entry + 13] = SP;
SP = [process_entry + 11]*512 -1;

//mode change
[process_entry + 9] = 5;


alias file_descriptor R2;
alias value R3;

file_descriptor = [[PTBR + 2*(userSP-4)/512]*512 +  (userSP-4)%512];

value = [[PTBR + 2*(userSP-3)/512]*512 +  (userSP-3)%512];

if(file_descriptor != -2) then
    
    goto write_file;

endif;


multipush(R0,R1,R2,R3);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = value;
call MOD_4;
multipop(R0,R1,R2,R3);



[[PTBR + 2*(userSP-1)/512]*512 +  (userSP-1)%512] = 0;
[process_entry + 9] =0;
SP = [process_entry + 13];
ireturn;



write_file :


if(!(0<= file_descriptor && file_descriptor <8)) then
   
     [[PTBR + 2*(userSP-1)/512]*512 + ((userSP-1)%512)] = -1;
     [process_entry + 9] = 0;
     SP = [process_entry + 13];
     ireturn;

endif;

alias RESOURCE_TABLE_ADDRESS R4;
RESOURCE_TABLE_ADDRESS = ([process_entry + 11] + 1)*512 - 16;

if([RESOURCE_TABLE_ADDRESS + file_descriptor*2] != 0 ) then
       
     [[PTBR + 2*(userSP-1)/512]*512 + ((userSP-1)%512)] = -1;
     [process_entry + 9] = 0;
     SP = [process_entry + 13];
     ireturn;

endif;


//not checking file type need to implement this

alias open_index R5;
open_index = [RESOURCE_TABLE_ADDRESS + file_descriptor*2 + 1];

alias open_entry R6;
open_entry = OPEN_FILE_TABLE + open_index*4;

alias inode_index R7;
inode_index = [open_entry];

alias inode_entry R8;
inode_entry = INODE_TABLE + inode_index*16; 


if([process_entry + 3]!= 1 && [inode_entry + 3]!= [process_entry + 3] && [inode_entry + 4]== 0) then
    
     [[PTBR + 2*(userSP-1)/512]*512 + ((userSP-1)%512)] = -3;
     [process_entry + 9] = 0;
     SP = [process_entry + 13];
     ireturn;

endif;


//acquire inode
multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
R1 = 4;
R2 = inode_index;
R3 = [SYSTEM_STATUS_TABLE + 1];
call MOD_0;
multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);


alias lseek R9;
lseek = [open_entry + 2];

if(lseek == MAX_FILE_SIZE) then
    
         //release inode 
         multipush(R0,R1);
         R1 = 5;
         R2 = inode_index;
         R3 = [SYSTEM_STATUS_TABLE + 1];
         call MOD_0;
         multipop(R0,R1);

        [[PTBR + 2*(userSP-1)/512]*512 + ((userSP-1)%512)] = -2;
        [process_entry + 9] = 0;
        SP = [process_entry + 13];
        ireturn;
endif;

alias block_number R10;

if(lseek == [inode_entry + 2] && lseek%512 == 0 ) then
      
   

      multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
      R1 = 3;
      call MOD_2;
      R10 = R0;
      multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
      
    

      if(block_number == -1) then

        //release inode 
         multipush(R0,R1);
         R1 = 5;
         R2 = inode_index;
         R3 = [SYSTEM_STATUS_TABLE + 1];
         call MOD_0;
         multipop(R0,R1);

        [[PTBR + 2*(userSP-1)/512]*512 + ((userSP-1)%512)] = -2;
        [process_entry + 9] = 0;
        SP = [process_entry + 13];
        ireturn;

      endif;
        
        [inode_entry + 8 + lseek/512] = block_number;
endif;


block_number = [inode_entry + 8 + lseek/512];
multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
R1 = 1;
R2 = block_number;
R4 = value;
R3 = lseek%512;
call MOD_3;
multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);


if(lseek == [inode_entry + 2]) then

     alias root_entry R11;
     root_entry = ROOT_FILE + inode_index*8;

     [inode_entry + 2] = [inode_entry + 2] + 1;
     [root_entry + 1] = [root_entry + 1] + 1;

endif;

[open_entry + 2] = [open_entry + 2] +1;



//release inode 
multipush(R0,R1);
R1 = 5;
R2 = inode_index;
R3 = [SYSTEM_STATUS_TABLE + 1];
call MOD_0;
multipop(R0,R1);

[[PTBR + 2*(userSP-1)/512]*512 + ((userSP-1)%512)] = 0;
[process_entry + 9] = 0;
SP = [process_entry + 13];
ireturn;


