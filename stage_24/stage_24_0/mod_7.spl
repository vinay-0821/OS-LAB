//exception handler
loadi(2,15);
loadi(3,16);

//exit
loadi(22,35);
loadi(23,36);

//timer 
loadi(4,17);
loadi(5,18);

//write
loadi(16,29);
loadi(17,30);

//library
loadi(63,13);
loadi(64,14);

//init
loadi(65,7);
loadi(66,8);

//mod_0
loadi(40,53);
loadi(41,54);

//mod_3 
loadi(46,59);
loadi(47,60);

//mod_4
loadi(48,61);
loadi(49,62);

//mod_5
loadi(50,63);
loadi(51,64);

//console
loadi(8,21);
loadi(9,22);

//disk
loadi(6,19);
loadi(7,20);


//int 4
loadi(10,23);
loadi(11,24);

//int 5
loadi(12,25);
loadi(13,26);

//int 6
loadi(14,27);
loadi(15,28);


//int 8
loadi(18,31);
loadi(19,32);

//int 9 
loadi(20, 33);
loadi(21, 34);

//int 11
loadi(24,37);
loadi(25,38);

//int 13
loadi(28,41);
loadi(29,42);

//int 14
loadi(30,43);
loadi(31,44);

//int 15
loadi(32,45);
loadi(33,46);

//module 1
loadi(42, 55);
loadi(43, 56);

//module 2
loadi(44, 57);
loadi(45, 58);

//inodeusertable
loadi(59, 3);
loadi(60, 4);

//disk_free_list
loadi(61,2);

//root file
loadi(62,5);


//setting page table for init
PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

//code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

//setting process table for init
[PROCESS_TABLE + 17]=1;
[PROCESS_TABLE + 19]=1;
[PROCESS_TABLE + 20]=CREATED;
[PROCESS_TABLE + 27]=80;
[PROCESS_TABLE + 28]=0;
[PROCESS_TABLE + 29]=8*512;
[PROCESS_TABLE + 30]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 31]=10;


//resource table setup for init
alias RESOURCE_TABLE_ADDRESS R6;

RESOURCE_TABLE_ADDRESS = (80+1)*512 -16;

alias itr R7;
itr = 0;

while (itr < 16) do
   
   [RESOURCE_TABLE_ADDRESS + itr] = -1;
   itr = itr + 1;

endwhile;




alias i R0;
i = 0;
while(i < 128) do 
    if(i < 83) then 
        [MEMORY_FREE_LIST + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif;
    i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;


[76*512]=[65*512+1];

[PROCESS_TABLE + 36]=TERMINATED;
[PROCESS_TABLE + 52]=TERMINATED;
[PROCESS_TABLE + 68]=TERMINATED;
[PROCESS_TABLE + 84]=TERMINATED;
[PROCESS_TABLE + 100]=TERMINATED;
[PROCESS_TABLE + 116]=TERMINATED;
[PROCESS_TABLE + 132]=TERMINATED;
[PROCESS_TABLE + 148]=TERMINATED;
[PROCESS_TABLE + 164]=TERMINATED;
[PROCESS_TABLE + 180]=TERMINATED;
[PROCESS_TABLE + 196]=TERMINATED;
[PROCESS_TABLE + 212]=TERMINATED;
[PROCESS_TABLE + 228]=TERMINATED;
[PROCESS_TABLE + 244]=TERMINATED;

[TERMINAL_STATUS_TABLE + 0] = 0;
[DISK_STATUS_TABLE + 0 ] = 0;
i = 0;
alias j R1;
while(i<16)  do
   
   j = 2;
   while(j<10) do

     [DISK_MAP_TABLE + i*10 + j] = -1;
     j= j+1;

    endwhile;
i=i+1;
endwhile;

[DISK_MAP_TABLE + 14] = 7;
[DISK_MAP_TABLE + 15] = 8;

i = 0;
while(i<32) do

    [SEMAPHORE_TABLE + i*4 ] = -1;
    [SEMAPHORE_TABLE + i*4 + 1] = 0;
    i =i+1;

endwhile;

i =0;
while(i<4) do
     
    [BUFFER_TABLE + i*4 ] = -1;     //block number
    [BUFFER_TABLE + i*4 + 1] = 0;   //dirty bit
    [BUFFER_TABLE + i*4 + 2] = -1;  //locking pid
    
    i = i + 1;

endwhile;

i =0;
while(i<60) do
    
    [FILE_STATUS_TABLE + i*4] = -1;
    [FILE_STATUS_TABLE + i*4 + 1] = -1;
    i =i+1;
    
endwhile;

i =0;
while(i< 32) do
    
    [OPEN_FILE_TABLE + i*4 ] = -1;
    [OPEN_FILE_TABLE + i*4 + 1] =0;
    i = i+1;

endwhile;




return;


