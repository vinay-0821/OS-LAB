//exec systemcall

alias  USER_SP R0;
USER_SP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9; //mode change

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 13] =SP;

SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 11]*512 -1; 

alias file_name R1;

file_name = [[PTBR + 2*(USER_SP-4)/512]*512 + (USER_SP-4)%512];

alias counter R2;
counter =1;

alias index R3;
index = -1; 

while(counter < 60) do

    if([INODE_TABLE+ counter*16 + 1]== file_name) then 

        index = counter;
        break;

    endif;

    counter = counter +1;

endwhile;

// print index;

if (index == -1) then 


    alias PhysicalAddressret R4;
    PhysicalAddressret = [PTBR + 2*(USER_SP-1)/512]*512 +  (USER_SP-1)%512 ;
    [PhysicalAddressret] = -1;

    SP = USER_SP;
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 9] =0;

    ireturn;

endif;


//calling exit_process function
multipush(R0,R1,R2,R3);

R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];

call MOD_1;

multipop(R0,R1,R2,R3);



//reassigning same user page
alias user_page R4;
user_page = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];

[MEMORY_FREE_LIST + user_page] = [MEMORY_FREE_LIST + user_page] +1;

[SYSTEM_STATUS_TABLE + 2] =[SYSTEM_STATUS_TABLE + 2]-1;


//resource table setup
alias RESOURCE_TABLE_ADDRESS R6;

RESOURCE_TABLE_ADDRESS = ((user_page+1)*512)-16;

alias itr R7;
itr = 0;

while (itr < 8) do
   
   [RESOURCE_TABLE_ADDRESS + itr*2] = -1;
   [RESOURCE_TABLE_ADDRESS + itr*2 + 1] = -1;

   itr = itr + 1;

endwhile;


SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 11]*512 -1; 

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 4] = RUNNING; //state change

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 7] =index;

//resource table

//library
[PTBR  + 0]= 63;
[PTBR  + 1]= "0100";
[PTBR  + 2]= 64;
[PTBR  + 3]= "0100";


//stack
multipush(R0,R1,R2,R3);
R1 = 1;
call MOD_2;

[PTBR  + 16]= R0;
[PTBR  + 17]= "0110";

multipop(R0,R1,R2,R3);

multipush(R0,R1,R2,R3);
R1 = 1;
call MOD_2;

[PTBR + 18]= R0;
[PTBR + 19]= "0110";

multipop(R0,R1,R2,R3);


//code 
if([INODE_TABLE + index*16 + 8] != -1) then   //index - R3

    multipush(R0,R1,R2,R3,R5);
    
    R1 = 5;
    R2 = [INODE_TABLE + index*16 + 8];     //get free code page
    call MOD_2;
    [PTBR + 8] = R0;
    [PTBR + 9] = "0100";
    multipop(R0,R1,R2,R3,R5);

    [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 4] = [INODE_TABLE + index*16 + 8]; //disk map table

else

    [PTBR  + 8]= -1;
    [PTBR  + 9]= "0000";

endif;

[PTBR  + 10]= -1;
[PTBR  + 11]= "0000";
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = [INODE_TABLE + index*16 + 9];


[PTBR  + 12]= -1;
[PTBR  + 13]= "0000";
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = [INODE_TABLE + index*16 + 10];

[PTBR  + 14]= -1;
[PTBR  + 15]= "0000";
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = [INODE_TABLE + index*16 + 11];



[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];

SP = 8*512 ;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0; //mode change
breakpoint;
ireturn;