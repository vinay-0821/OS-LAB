//resource manager
alias fun_number  R1;

//acquire buffer
if(fun_number == 1) then
     
     alias buffer_number R2;
     alias PID R3;
     alias buffer_entry R4;
     alias process_entry R5;

     process_entry = PROCESS_TABLE + PID*16;
     buffer_entry = BUFFER_TABLE + buffer_number*4;

     while([buffer_entry + 2]!= -1 && [buffer_entry + 2]!= PID) do

              [process_entry + 4] = WAIT_BUFFER;
              [process_entry + 5] = buffer_number;

              multipush(R1,R2,R3,R4,R5);
              call MOD_5;
              multipop(R1,R2,R3,R4,R5);

     endwhile;

     [buffer_entry + 2] = PID;

     return;

endif;


//release buffer 
if(fun_number == 2) then
      
      alias buffer_number R2;
      alias PID R3;
      alias buffer_entry R4;
      alias process_entry R5;

      buffer_entry = BUFFER_TABLE + buffer_number*4;

      if([buffer_entry + 2] == PID) then

          [buffer_entry + 2] = -1;

          alias i R6;
          i =0;

          while(i<16) do
              
              process_entry = PROCESS_TABLE + i*16;
              if([process_entry + 4] == WAIT_BUFFER && [process_entry + 5] == buffer_number) then
                   
                   [process_entry + 4] = READY;

              endif;

              i =i +1;

        endwhile;
          
      endif;

    return;
 
 endif;

//acquire disk
if (fun_number == 3) then

    alias currentPID R2;
    while([DISK_STATUS_TABLE]==1) do 
        
        //change the state
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;

        //call_sheduler
        multipush(R1,R2);
        call MOD_5;
        multipop(R1,R2);

    endwhile;

    [DISK_STATUS_TABLE]=1;
    [DISK_STATUS_TABLE + 4] = currentPID;

    return;

endif;


//acquire inode
if(fun_number == 4) then
   
   alias inodeindex R2;
   alias PID R3;

   alias file_entry R4;

   file_entry = FILE_STATUS_TABLE + inodeindex*4;

   while([file_entry]!= -1 && [file_entry]!= PID) do
       
       [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_FILE;
       [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 5] = inodeindex;

       multipush(R1,R2,R3,R4);
       call MOD_5;
       multipop(R1,R2,R3,R4);

    endwhile;


    if([INODE_TABLE + inodeindex*16+ 1] == -1) then
        
        R0 = -1;

    endif;

    [file_entry] = PID;

    R0 = 0;
    return;

endif;

//release inode
if(fun_number == 5) then
    

    alias inodeindex R2;
    alias PID R3;

    alias file_entry R4;
    alias process_entry R5;

   file_entry = FILE_STATUS_TABLE + inodeindex*4;

   if([file_entry] == PID) then
       
       [file_entry] = -1;

       alias i R5;
       i =0;

       while(i<16) do
         
         process_entry = PROCESS_TABLE + i*16;
         if([process_entry + 4] == WAIT_FILE && [process_entry + 5] == inodeindex) then
              
              [process_entry + 4] = READY;

         endif;

         i =i +1;

       endwhile;

    endif;

    return;

endif;


//acquire semaphore

if(fun_number == 6) then

    alias PID R2;

    alias i R3;
    i = 0;

    while(i< 32) do 
        
        if([SEMAPHORE_TABLE + i*4 + 1] == 0) then

             [SEMAPHORE_TABLE + i*4] = -1;
             [SEMAPHORE_TABLE + i*4 + 1] = 1;

             R0 = i;
             return;

        endif;

        i = i+1;

    endwhile;

    R0 = -1;
    return;

endif;


//release semaphore

if(fun_number == 7)  then

alias semID R2;
alias PID R3;


if([SEMAPHORE_TABLE + semID*4] == PID) then
    
    [SEMAPHORE_TABLE + semID*4] = -1;

    alias i R4;
    i = 0;

    while(i<16) do
       
       if([PROCESS_TABLE + i*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + i*16 + 5] == semID) then
           
           [PROCESS_TABLE + i*16 + 4] = READY;
        
        endif;

        i = i+1;

    endwhile;

    

endif;


[SEMAPHORE_TABLE + semID*4 + 1] = [SEMAPHORE_TABLE + semID*4 + 1] -1;

return;

endif;


//acquire terminal
if(fun_number==8)  then


    while ( [TERMINAL_STATUS_TABLE + 0] == 1 ) do 

        //change status
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4 ]= WAIT_TERMINAL;

        multipush(R0,R1,R2,R3);

        call MOD_5;

        multipop(R0,R1,R2,R3);

    endwhile;


    [TERMINAL_STATUS_TABLE + 0] = 1;
    [TERMINAL_STATUS_TABLE + 1] = [SYSTEM_STATUS_TABLE + 1];

    return;


endif;

 
//release terminal
if(fun_number == 9)  then

    alias reqPID R2;
    if([TERMINAL_STATUS_TABLE + 1]!= reqPID)  then

        R0 = -1;
        return;

    endif;

    [TERMINAL_STATUS_TABLE + 0] = 0;   //changing status for terminal

    alias counter R4;

    counter=0;

    while(counter<=15) do

        if([PROCESS_TABLE + counter*16 + 4] == WAIT_TERMINAL) then

            [PROCESS_TABLE + counter*16 + 4]=READY;

        endif;

    counter = counter + 1; 

    endwhile;

    return;

endif;