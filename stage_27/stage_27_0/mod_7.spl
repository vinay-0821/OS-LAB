//exception handler
loadi(2,15);
loadi(3,16);

//timer 
loadi(4,17);
loadi(5,18);

//disk
loadi(6,19);
loadi(7,20);

//console
loadi(8,21);
loadi(9,22);

//library
loadi(63,13);
loadi(64,14);

//init
loadi(65,7);

//shell
loadi(67,9);
loadi(68,10);

//inodeusertable
loadi(59, 3);
loadi(60, 4);

//disk_free_list
loadi(61,2);

//root file
loadi(62,5);



alias k R4;
k = 10;
while(k <= 53) do
 
  loadi(k,k+13);
  k = k +1;

endwhile;


//setting page table for init
PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";

//code
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=-1;
[PTBR+11]="0000";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=66;
[PTBR+17]="0110";
[PTBR+18]=-1;
[PTBR+19]="0000";

//resource table setup for init
alias RESOURCE_TABLE_ADDRESS R6;

RESOURCE_TABLE_ADDRESS = (77+1)*512 -16;

alias itr R7;
itr = 0;

while (itr < 16) do
   
   [RESOURCE_TABLE_ADDRESS + itr] = -1;
   itr = itr + 1;

endwhile;

//setting process table for init
[PROCESS_TABLE + 17]=1;
[PROCESS_TABLE + 19]=0;
[PROCESS_TABLE + 20]=CREATED;
[PROCESS_TABLE + 27]=77;
[PROCESS_TABLE + 28]=0;
[PROCESS_TABLE + 29]=8*512;
[PROCESS_TABLE + 30]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 31]=10;

[66*512]=[65*512+1];

//shell allocation
PTBR=PAGE_TABLE_BASE+40;
PTLR=10;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
[PTBR+4]=-1;
[PTBR+5]="0000";
[PTBR+6]=-1;
[PTBR+7]="0000";

//code
[PTBR+8]=67;
[PTBR+9]="0100";
[PTBR+10]=68;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//stack
[PTBR+16]=78;
[PTBR+17]="0110";
[PTBR+18]=79;
[PTBR+19]="0000";


//resource table setup for shell

RESOURCE_TABLE_ADDRESS = (80+1)*512 -16;
itr = 0;

while (itr < 16) do
   
   [RESOURCE_TABLE_ADDRESS + itr] = -1;
   itr = itr + 1;

endwhile;


//setting process table for shell
[PROCESS_TABLE + 33]=2;
[PROCESS_TABLE + 35]=1;
[PROCESS_TABLE + 36]=TERMINATED;
[PROCESS_TABLE + 43]=80;
[PROCESS_TABLE + 44]=0;
[PROCESS_TABLE + 45]=8*512;
[PROCESS_TABLE + 46]=PAGE_TABLE_BASE+40;
[PROCESS_TABLE + 47]=10;

[78*512]=[67*512+1];

itr = 0;
while(itr < 16) do
   
   if(itr >= 3) then

       [PROCESS_TABLE + itr*16 + 4] = TERMINATED;

   endif;

   [PROCESS_TABLE + itr*16] = 0;

   itr = itr + 1;

endwhile;


alias i R0;
i = 0;
alias j R1;

while(i<16)  do
   
   j = 2;
   while(j<10) do

     [DISK_MAP_TABLE + i*10 + j] = -1;
     j= j+1;

    endwhile;
i=i+1;
endwhile;

[DISK_MAP_TABLE + 24] = 9;
[DISK_MAP_TABLE + 25] = 10;

i = 0;
while(i<32) do

    [SEMAPHORE_TABLE + i*4 ] = -1;
    [SEMAPHORE_TABLE + i*4 + 1] = 0;
    i =i+1;

endwhile;



i =0;
while(i<4) do
     
    [BUFFER_TABLE + i*4 ] = -1;     //block number
    [BUFFER_TABLE + i*4 + 1] = 0;   //dirty bit
    [BUFFER_TABLE + i*4 + 2] = -1;  //locking pid
    
    i = i + 1;

endwhile;

i =0;
while(i<60) do
    
    [FILE_STATUS_TABLE + i*4] = -1;
    [FILE_STATUS_TABLE + i*4 + 1] = -1;
    i =i+1;
    
endwhile;

i =0;
while(i< 32) do
    
    [OPEN_FILE_TABLE + i*4 ] = -1;
    [OPEN_FILE_TABLE + i*4 + 1] =0;
    i = i+1;

endwhile;


i = 0;
while(i < 128) do 
    if(i < 83) then 
        [MEMORY_FREE_LIST + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif;
    i = i + 1;
endwhile;



return;


