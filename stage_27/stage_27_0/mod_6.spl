alias fun_number R1;
alias pid R2;

if(fun_number == SWAP_OUT) then
    
    
    alias i R3;
    alias proc_entry R4;
    alias reqpid R5;
    reqpid = -1;
    alias condition R6;

    condition = WAIT_PROCESS;
    call find_process;


    if(i != 15) then

    goto process_found;
    
    endif;

    condition = WAIT_SEMAPHORE;
    call find_process;

    if(i != 15) then

    goto process_found;
    
    endif;
    
    reqpid = -1;
    alias max R7;
    max = -1;

    i = 3;
    while(i < 15) do

      proc_entry = PROCESS_TABLE + 16*i;

      if([proc_entry] > max && [proc_entry + 4] != ALLOCATED && [proc_entry + 4] != RUNNING && [proc_entry + 4] != TERMINATED && [proc_entry + 6] != 1) then
	             
              max = [proc_entry];
	            reqpid = i;
      endif;

     i = i + 1;
     
    endwhile;

    if(reqpid == -1) then
      
       [SYSTEM_STATUS_TABLE + 5] = 0;
       return;

   endif;


process_found :
   


   proc_entry = PROCESS_TABLE + reqpid*16;
   [proc_entry] = 0;

   alias page_table R7;
   page_table = [proc_entry + 14];    // PTBR

   alias page_entry R8;

   i = 3;



   while(i < 10) do
      
    page_entry = page_table + 2*i;

    if(i >= 4 && i <= 7) then
         
         if([page_entry] != -1) then
            
            R10 = [page_entry];
            call release_page;

            [page_entry] = -1;
            [page_entry + 1] = "0000";

        endif;
      
    endif;

                                                          
    if((i >= 2 && i<= 3 ) || (i>= 8 && i<= 9)) then             //change for stack this wont cause a problem though
         
         if([page_entry] != -1 && [MEMORY_FREE_LIST + [page_entry]] < 2) then
               
               call get_block;
               [DISK_MAP_TABLE + reqpid*10 + i] = R0;
               
               R10 = [page_entry];
               call disk_store;

               R10 = [page_entry];
               call release_page;

               [page_entry] = -1;
               [page_entry + 1] = "0000";
        endif;

    endif;


    i = i+1;

  endwhile;

  
  [proc_entry + 6] = 1;   //swapped 

  [SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] + 1;  //swapped process
  [SYSTEM_STATUS_TABLE + 5] = 0;                              //paging status
 
  return;

  find_process : 

        i = 3;
        while(i < 15) do

        proc_entry = PROCESS_TABLE + i*16;

        if([proc_entry + 4] == condition && [proc_entry + 6] != 1) then
            reqpid = i;
            break;
        endif;

        i = i+1;
        endwhile;
        

        return;

endif;


if(fun_number == SWAP_IN) then


  alias i R3;
  alias proc_entry R4;
  alias reqpid R5;
  alias max R6;

  reqpid = -1;
  i = 0;
  max = -1;

  while(i < 16) do
     proc_entry = PROCESS_TABLE + 16*i;

     if([proc_entry] > max && [proc_entry + 4] == READY && [proc_entry + 6] == 1) then
      
       reqpid = i;
       max = [proc_entry];

     endif;

  i = i + 1;
  endwhile;




  if(reqpid == -1) then
    [SYSTEM_STATUS_TABLE + 5] = 0;
    return;
  endif;

  proc_entry = PROCESS_TABLE + 16*reqpid;
  [proc_entry] = 0;

  alias page_table R7;
  page_table = [proc_entry + 14];
  i = 2;

  alias page_entry R8;


  while(i < 10) do

    page_entry = page_table + 2*i;

    if(i>1 && i<4) then

         if([DISK_MAP_TABLE + 10*reqpid + i] != -1) then

            call get_freepage;

            [page_entry] = R0;
            [page_entry + 1] = "0110";
            R10 = [DISK_MAP_TABLE + 10*reqpid + i];
            call disk_load;

            R10 = [DISK_MAP_TABLE + 10*reqpid + i];
            call release_block;

            [DISK_MAP_TABLE + 10*reqpid + i] = -1;

      endif; 

    endif;


    if(i > 7 && i <10) then

            call get_freepage;

            [page_entry] = R0;
            [page_entry + 1] = "0110";

            R10 = [DISK_MAP_TABLE + 10*reqpid + i];
            call disk_load;

            R10 = [DISK_MAP_TABLE + 10*reqpid + i];
            call release_block;

            [DISK_MAP_TABLE + 10*reqpid + i] = -1;

    endif;

  i = i + 1;
  endwhile;

  [proc_entry + 6] = 0;
  [SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] - 1;
  [SYSTEM_STATUS_TABLE + 5] = 0;


  return;

endif;


get_freepage:
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1 = 1;
	call MOD_2;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
return;

release_block:

  multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1 = 4;
	R2 = R10;
	call MOD_2;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	return;

disk_load:

	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1 = 2;
	R2 = pid;
	R3 = R0;
  R4 = R10;
	call MOD_4;
  multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	return;
    
release_page :

multipush(R1,R2,R3,R4,R5,R6,R7,R8);
R1 = 2;
R2 = R10;
call MOD_2;
multipop(R1,R2,R3,R4,R5,R6,R7,R8);
return;


get_block :

multipush(R1,R2,R3,R4,R5,R6,R7,R8);
R1 = 3;
call MOD_2;
multipop(R1,R2,R3,R4,R5,R6,R7,R8);
return;


disk_store:

multipush(R1,R2,R3,R4,R5,R6,R7,R8);
R1 = 1;
R2 = pid;
R3 = R10;
R4 = R0;
call MOD_4;
multipop(R1,R2,R3,R4,R5,R6,R7,R8);
return;